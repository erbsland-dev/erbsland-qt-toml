<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classerbsland_1_1qt_1_1toml_1_1_location" kind="class" language="C++" prot="public">
    <compoundname>erbsland::qt::toml::Location</compoundname>
    <includes refid="_location_8hpp" local="no">erbsland/qt/toml/Location.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classerbsland_1_1qt_1_1toml_1_1_location_1a045f5dacf396bd67ac543581232a6a3b" prot="public" static="no">
        <type><ref refid="namespaceerbsland_1_1qt_1_1toml_1a06a315dbcc1a56376b3d1a00650e177a" kindref="member">LocationFormat</ref></type>
        <definition>using erbsland::qt::toml::Location::Format =  LocationFormat</definition>
        <argsstring></argsstring>
        <name>Format</name>
        <briefdescription>
<para>A local name for the enum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="48" column="5" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1qt_1_1toml_1_1_location_1a2fa3cded2216e73ee3094e461605eb7a" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t erbsland::qt::toml::Location::_index</definition>
        <argsstring></argsstring>
        <name>_index</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The character index in the stream, starting from zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="143" column="13" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1qt_1_1toml_1_1_location_1a54991f405dca8479d652163d2adea075" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t erbsland::qt::toml::Location::_line</definition>
        <argsstring></argsstring>
        <name>_line</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The line, starting from 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="144" column="13" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1qt_1_1toml_1_1_location_1a2bf20a8e4642ccd3499602db16e5bf0c" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t erbsland::qt::toml::Location::_column</definition>
        <argsstring></argsstring>
        <name>_column</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The column, starting from 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="145" column="13" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1ac8adf118b5df44836765c09aba1b6845" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr erbsland::qt::toml::Location::Location</definition>
        <argsstring>(int64_t index, int64_t line, int64_t column) noexcept</argsstring>
        <name>Location</name>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new location.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The character index in the stream, starts from zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number in the document, starts from one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number in the document, starts from one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="30" column="15" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1aac109f0557894ff4ee1e199022effcc0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr erbsland::qt::toml::Location::Location</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Location</name>
        <briefdescription>
<para>Create a location with row 1, column 1 and index 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="36" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1abaf64f448317d9320ae9336be6912fce" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::index</definition>
        <argsstring>() const noexcept -&gt; int64_t</argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the index of the location.</para>
<para><simplesect kind="note"><para>Do not confuse this with the byte index. </para>
</simplesect>
<simplesect kind="return"><para>The character index in the current document, starting from zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="56" column="21" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a9b39e51b8ba2e92d061dde56952b84d7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::line</definition>
        <argsstring>() const noexcept -&gt; int64_t</argsstring>
        <name>line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the line of the location.</para>
<para><simplesect kind="return"><para>The line, starting from one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="62" column="21" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a8428d36c60db2fb706fea73ddbaee862" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::column</definition>
        <argsstring>() const noexcept -&gt; int64_t</argsstring>
        <name>column</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the column of the location.</para>
<para><simplesect kind="return"><para>The column, starting from one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="68" column="21" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a4fddce091b99b19694e1fc37a9f5fbae" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator==</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="82" column="20" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a2954cffec2ba0a2a4c10fffbfcce6bda" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator!=</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="86" column="20" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1ab6f7c10243e6bf4c0819828073f880c6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator&lt;</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="90" column="15" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a6b9dc53bedec9f47fcac6302534f5f7f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator&lt;=</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="96" column="15" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1ab8e6072d19130aa6319bc51738e1c233" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator&gt;</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="100" column="20" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a5fb0c954883128d4d19b74e1e7fa0969" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::operator&gt;=</definition>
        <argsstring>(const Location &amp;other) const noexcept -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two locations.</para>
<para>When comparing two locations for equality, all three parts (<computeroutput>index</computeroutput>, line and column) are compared. When locations are compared to see if they are greater or less, the <computeroutput>index</computeroutput> is mainly compared and only when the index is equal, <computeroutput>line</computeroutput> and <computeroutput>column</computeroutput> are also compared too. While it makes no sense to compare locations from two different files, by comparing all elements the behaviour when used as key is well defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other location to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The comparison result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="106" column="20" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1ae4230841b61238e52e9e2409384e06f8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto erbsland::qt::toml::Location::isNotSet</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>isNotSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if an element of this location is negative, indicating it is not set.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if any of the values <computeroutput>index</computeroutput>, <computeroutput>line</computeroutput> or <computeroutput>column</computeroutput> is negative. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="115" column="21" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a264ace2329d864f23d111e8d8ea95899" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::qt::toml::Location::increment</definition>
        <argsstring>(bool isNewLine) noexcept</argsstring>
        <name>increment</name>
        <param>
          <type>bool</type>
          <declname>isNewLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment the location by one character.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isNewLine</parametername>
</parameternamelist>
<parameterdescription>
<para>If a newline was read. In this case the line is incremented and the column is set to one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="124" column="10" bodyfile="erbsland/qt/toml/Location.cpp" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a7adf22587bb80f24b5b9d15b0e127d35" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto erbsland::qt::toml::Location::toString</definition>
        <argsstring>(Format format) const noexcept -&gt; QString</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceerbsland_1_1qt_1_1toml_1a06a315dbcc1a56376b3d1a00650e177a" kindref="member">Format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert this location into a string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string with the format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="132" column="11" bodyfile="erbsland/qt/toml/Location.cpp" bodystart="10" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1abeedaeff9977c9165433d45a5a196293" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::qt::toml::Location::Location</definition>
        <argsstring>(const Location &amp;) noexcept=default</argsstring>
        <name>Location</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="39" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1afdd2c27b679c44c737817dd5b2de3e4d" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto erbsland::qt::toml::Location::operator=</definition>
        <argsstring>(const Location &amp;) noexcept -&gt; Location &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classerbsland_1_1qt_1_1toml_1_1_location" kindref="compound">Location</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>assign </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="42" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a2f4e59b2970405b612374be62d3bdb06" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::qt::toml::Location::~Location</definition>
        <argsstring>()=default</argsstring>
        <name>~Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dtor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="45" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classerbsland_1_1qt_1_1toml_1_1_location_1a4387ce0b9659dfa0cbaf0c2171ddde73" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr static auto</type>
        <definition>constexpr static auto erbsland::qt::toml::Location::createNotSet</definition>
        <argsstring>() noexcept -&gt; Location</argsstring>
        <name>createNotSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a location that is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/qt/toml/Location.hpp" line="138" column="28" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="138" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The location in document. </para>
    </detaileddescription>
    <location file="erbsland/qt/toml/Location.hpp" line="20" column="1" bodyfile="erbsland/qt/toml/Location.hpp" bodystart="20" bodyend="146"/>
    <listofallmembers>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a2bf20a8e4642ccd3499602db16e5bf0c" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>_column</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a2fa3cded2216e73ee3094e461605eb7a" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>_index</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a54991f405dca8479d652163d2adea075" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>_line</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a8428d36c60db2fb706fea73ddbaee862" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>column</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a4387ce0b9659dfa0cbaf0c2171ddde73" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>createNotSet</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a045f5dacf396bd67ac543581232a6a3b" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>Format</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a264ace2329d864f23d111e8d8ea95899" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>increment</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1abaf64f448317d9320ae9336be6912fce" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>index</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1ae4230841b61238e52e9e2409384e06f8" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>isNotSet</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a9b39e51b8ba2e92d061dde56952b84d7" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>line</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1ac8adf118b5df44836765c09aba1b6845" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>Location</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1aac109f0557894ff4ee1e199022effcc0" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>Location</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1abeedaeff9977c9165433d45a5a196293" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>Location</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a2954cffec2ba0a2a4c10fffbfcce6bda" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator!=</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1ab6f7c10243e6bf4c0819828073f880c6" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator&lt;</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a6b9dc53bedec9f47fcac6302534f5f7f" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator&lt;=</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1afdd2c27b679c44c737817dd5b2de3e4d" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a4fddce091b99b19694e1fc37a9f5fbae" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator==</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1ab8e6072d19130aa6319bc51738e1c233" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator&gt;</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a5fb0c954883128d4d19b74e1e7fa0969" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>operator&gt;=</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a7adf22587bb80f24b5b9d15b0e127d35" prot="public" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>toString</name></member>
      <member refid="classerbsland_1_1qt_1_1toml_1_1_location_1a2f4e59b2970405b612374be62d3bdb06" prot="private" virt="non-virtual"><scope>erbsland::qt::toml::Location</scope><name>~Location</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
